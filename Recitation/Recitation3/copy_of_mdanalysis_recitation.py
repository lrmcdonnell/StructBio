# -*- coding: utf-8 -*-
"""Copy of MDAnalysis_Recitation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Txa8TBjpcTBANcmqwHaGH39m_XLBci1I

We'll be using a Python package called MDAnalysis to process and analyze MD trajectory files (dcd). Start by installing both MDAnalysis and Py3DMol in your notebook environment.
"""

!pip install --upgrade MDAnalysis
!pip install py3Dmol

"""Now download and extract the recitation files containing our trajectories."""

!wget -O m114t_amber_1_md3.nc https://canvas.pitt.edu/files/19697173/download?download_frd=1
!wget -O m114t_amber.prmtop https://canvas.pitt.edu/files/19697222/download?download_frd=1
!wget -O wt_amber_1_md3.nc https://canvas.pitt.edu/files/19697180/download?download_frd=1
!wget -O wt_amber.prmtop https://canvas.pitt.edu/files/19697223/download?download_frd=1

"""# MDAnalysis

Python package for reading and analyzing molecular dynamics trajectories.

https://www.mdanalysis.org/

A simulation ("universe") is defined by its topology file (prmtop) and trajectory (dcd or nc)
"""

# Commented out IPython magic to ensure Python compatibility.
from glob import glob
import numpy as np
import pandas as pd
import seaborn as sns

import MDAnalysis
from MDAnalysis.analysis.rms import rmsd, RMSD
from MDAnalysis.analysis import align
from MDAnalysis.analysis.rms import RMSF
from MDAnalysis.analysis import distances

import py3Dmol
import matplotlib.pyplot as plt
# %matplotlib inline

"""Load the topology files and trajectory files into the [Universe](https://userguide.mdanalysis.org/stable/universe.html). The Universe contains all of the information about the molecular dynamics system."""

## wt = MDAnalysis.Universe(????)
## mutant = MDAnalysis.Universe(????)

wt.trajectory

mutant.trajectory

"""Now we'll write the wildtype and mutant protein to PDB files and visualize."""

protein = wt.select_atoms('protein')
protein.write('wildtype.pdb')
protein = mutant.select_atoms('protein')
protein.write('mutant.pdb')

mutant_pdbfile = open('mutant.pdb').read()
wt_pdbfile = open('wildtype.pdb').read()
view = py3Dmol.view()
view.addModel(mutant_pdbfile,'pdb')
view.addModel(wt_pdbfile,'pdb')
view.zoomTo()
view.setStyle({'model':0}, {'cartoon': {'color':'teal'}})
view.setStyle({'model':1}, {'cartoon': {'color':'pink'}})

"""## `AtomGroup`

`Universe` contains all particles in the molecular system. Atoms (or atom-like objects) are grouped into `AtomGroup`s.
The largest possible `AtomGroup` of a `Universe` is accessible at `Universe.atoms`.

An `AtomGroup` is usually created via `Universe.select_atoms` with [Atom Selection](https://userguide.mdanalysis.org/stable/selections.html#selections) algebra

Create an `AtomGroup` with all of the atoms of the protein (exclude waters) for both trajectories.

Compare the number of atoms in the `AtomGroup`s you created and compare the number of atoms to the full `Universe`.

What is the simulation mostly composed of? (in terms of number of atoms)
"""

## wt_p = SELECT THE ATOMS IN THE WILDTYPE PROTEIN
## mutant_p = SELECT THE ATOMS IN THE MUTANT PROTEIN

for i in wt.trajectory:
  print(wt_p.positions[0])

"""### Task 1
Create an `AtomGroup` for the residue that has changed between the two simulations.

Print out the residue names and numbers of those residues.
"""

## wt_residues = ???
## mutant_residues = ???
for wtr, mutantr in zip(wt_residues.residues,mutant_residues.residues):
    print(f'WT:{wtr.resname},{wtr.resnum}')
    print(f'I154F:{mutantr.resname},{mutantr.resnum}')

"""## RMSD
Root Mean Square Deviation
$$
	\sqrt{\frac{1}{N}\sum\limits_i^N\left[(x_i-x^{ref}_i)^2+(y_i-y^{ref}_i)^2+(z_i-z^{ref}_i)^2\right]}
$$

### Task 2
Calculate the RMSD for each frame of the trajectory using the first frame as the reference
"""

wt_ref = wt_p.positions
mutant_ref= mutant_p.positions

rmsd_wt = [rmsd(wt_ref,wt_p.positions) for t in wt.trajectory]
rmsd_mutant = [rmsd(mutant_ref, mutant_p.positions) for t in mutant.trajectory]

plt.plot(rmsd_wt)
plt.plot(rmsd_mutant)
plt.xlabel('Step Number')
plt.ylabel('RMSD ($\AA$)')
plt.legend(['WT','Mutant'])

"""**Notice that the RMSD for each trajectory by step is not aligned well. This is because we forgot to align our trajectory frames! To get the right plot, we'll have to align them by alpha-carbons.**

We can set a reference frame when calculating the RMSD to get a plot based on aligned trajectories.
"""

# R_wt = RMSD(??,  # universe to align
#              ??,  # reference universe or atomgroup
#              select='protein',  # group to superimpose and calculate RMSD
#              ref_frame=0)  # frame index of the reference
# R_wt.run()

# R_mutant = RMSD(??,  # universe to align
#              ??,  # reference universe or atomgroup
#              select='protein',  # group to superimpose and calculate RMSD
#              ref_frame=0)  # frame index of the reference
# R_mutant.run()

## Get the rmsd (transpose makes it easier to plot)
wt_rmsd = R_wt.rmsd.T
mut_rmsd = R_mutant.rmsd.T

plt.plot(mut_rmsd[1], mut_rmsd[2])
plt.plot(wt_rmsd[1], wt_rmsd[2])
plt.xlabel('Step Number')
plt.ylabel('RMSD ($\AA$)')
plt.legend(['WT','Mutant'])

"""Now we have the right plot for analysis. But it would be a lot easier if we could just align the trajectories once rather than each time we calculate.

### Alignment
Here we'll [align the trajectory to itself](https://userguide.mdanalysis.org/stable/examples/analysis/alignment_and_rms/aligning_trajectory_to_frame.html) (first frame). Let's calculate the RMSD for the wildtype and mutant before alignment.
"""

## Load in the trajectory and topology for alignment reference
## wt_ref = MDAnalysis.Universe(????)

## Set the trajectory to the last frame
## YOUR CODE HERE

## Set the reference trajectory to the first frame
## YOUR CODE HERE

## Select the alpha-carbons and calculate rmsd between them
# wt_ca = ???
# wt_ref_ca = ???
# wt_unaligned_rmsd = ???

## Now do the same for the mutant
mutant_ref = MDAnalysis.Universe(????)

## Set the trajectory to the last frame
## YOUR CODE HERE

## Set the reference trajectory to the first frame
## YOUR CODE HERE

## Select the alpha-carbons and calculate rmsd between them
# mutant_ca = ????
# mutant_ref_ca = ????
# mut_aligned_rmsd = ????

print(f"Unaligned WT RMSD: {wt_unaligned_rmsd:.2f}")
print(f"Unaligned mutant RMSD: {mut_unaligned_rmsd:.2f}")

"""Use AlignTraj to align the trajectories to the reference you created. (https://userguide.mdanalysis.org/stable/examples/analysis/alignment_and_rms/aligning_trajectory.html)"""

## wt_aligner = ???.run()
## mut_aligner = ???.run()

"""Calculate RMSD again to see how the values differ after alignment"""

## Load in the trajectory and topology for alignment reference
## wt_ref = MDAnalysis.Universe(????)

## Set the trajectory to align to the last frame
## YOUR CODE HERE

## Set the reference trajectory to the first frame
## YOUR CODE HERE

## Select the alpha-carbons and calculate rmsd between them
# wt_ca = ???
# wt_ref_ca = ???
# wt_unaligned_rmsd = ???

## Now do the same for the mutant
mutant_ref = MDAnalysis.Universe(????)

## Set the trajectory to align to the last frame
## YOUR CODE HERE

## Set the reference trajectory to the first frame
## YOUR CODE HERE

## Select the alpha-carbons and calculate rmsd between them
# mutant_ca = ????
# mutant_ref_ca = ????
# mut_aligned_rmsd = ????

print(f"Aligned WT RMSD: {wt_aligned_rmsd:.2f}")
print(f"Aligned mutant RMSD: {mut_aligned_rmsd:.2f}")

"""Let's plot the RMSD again and see what we get - it should match the RMSD plot we made when we set the reference frame!!"""

## Select the protein atoms for the newly aligned wt and mutant trajectories
# wt_p = ????
# mutant_p = ????

## wt_ref = ???? wildtype positions
## mutant_ref= ???? mutant positions

## rmsd_wt = [calculate RMSD for t in wt.trajectory]
## rmsd_mutant = [calculate RMSD for t in mutant.trajectory]

plt.plot(rmsd_wt)
plt.plot(rmsd_mutant)
plt.xlabel('Step Number')
plt.ylabel('RMSD ($\AA$)')
plt.legend(['WT','Mutant'])

"""# RMSF
## Task 3
Calculate the RMSF of the protein atoms (excluding Hydrogens) across both simulations.

MDAnalysis provides an example [here](https://docs.mdanalysis.org/stable/documentation_pages/analysis/rms.html#MDAnalysis.analysis.rms.RMSF)

Root Mean Square Fluctuation

This is calculated in relation to a single atom $i$ over time
$$
   \rho = \sqrt{\langle\left( x_i-\langle x_i\rangle^2\right)\rangle}
$$

To calculate RMSF, we use the average structure as the reference. First we'll calculate that and the align our trajectory to the average structure before calculating RMSF.
"""

def get_rmsf(traj):
    ## Select all protein atoms excluding Hydrogens
    # prot_select = ??

    ## Calculate the average coordinates for the trajectory (hint: read the documentation!)
    # avg_coords = ??

    ## Make an AtomGroup with the average coordinates
    ref = MDAnalysis.Merge(prot_select).load_new(avg_coords[:,None,:], order="afc")

    ## Use AlignTraj to align the trajectory to the average coordinates
    # aligner = ??

    ## Calculate the RMSF for the selection
    #rmsfer = ??

    return pd.DataFrame(zip(prot_select.resnums, rmsfer.results.rmsf), columns=('resid','rmsf'))

rmsf_wt = get_rmsf(wt)
rmsf_mutant = get_rmsf(mutant)

fig, ax = plt.subplots(figsize=(14,3))
sns.swarmplot(data=rmsf_wt,x='resid',y='rmsf',dodge=True,size=1,ax=ax)
sns.swarmplot(data=rmsf_mutant,x='resid',y='rmsf',dodge=True,size=1,ax=ax)
ax.tick_params(axis='x', labelrotation = 90)

"""Here, we calculated the RMSF per atom. Let's look at the average RMSF for each residue."""

fig, ax = plt.subplots(figsize=(14,3))
m_rmsf_wt = rmsf_wt.groupby('resid').mean().reset_index()
m_rmsf_mutant = rmsf_mutant.groupby('resid').mean().reset_index()
sns.swarmplot(data=m_rmsf_wt,x='resid',y='rmsf',ax=ax)
sns.swarmplot(data=m_rmsf_mutant,x='resid',y='rmsf',ax=ax)
ax.tick_params(axis='x', labelrotation = 90)

"""##**Add both your post-aligned RMSD and RMSF plots to the Google Slides with your first and last name**

# Check+: Relating back to structure
"""

## Find the difference between the average RMSF values of the mutant and wildtype for each residue
# MAKE DF OF RESIDUE:DIFF IN AVG RMSF
# LOAD WT OR MUTANT PDB IN PY3DMOL
# COLOR BY RMSF DIFFERENCE